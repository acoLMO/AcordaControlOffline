@page "/Checklist/{FarmInspectionId:int}"
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using InspectionOutcome = AcordaControlOffline.Shared.Domain.Inspection.InspectionOutcome
@using System.Timers
@using System.Reflection.Metadata.Ecma335
@inject NavigationManager Navigation
@inject IRepository Repository
@implements IDisposable

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/" + FarmId)'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Signatures/" + FarmInspectionId + "?FarmId=" + FarmId)'>
                <i class="fas fa-arrow-right"></i>
                Signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Manquements antérieurs</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        @if (model.Any())
        {
            <div class="mb-2">
                <button @onclick="@ExpandAll" class="btn btn-sm btn-info mr-1 mb-2">Déplier tous</button>
                <button @onclick="@CollapseAll" class="btn btn-sm btn-info mr-1 mb-2">Replier tous</button>
                <button class="btn btn-sm btn-info mr-1 mb-2">Afficher NA/NC auto</button>
                <button class="btn btn-sm btn-info mr-1 mb-2">Cacher NA/NC auto</button>
            </div>
            <div id="checklist">
                <div class="list-group">
                    @foreach (var (item, index) in model.WithIndex())
                    {
                        <div id="@item.Id" class="list-group-item" href="#">
                            <ResultEditor @ref="@Editor" Model="@item" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    public int FarmId;
    readonly List<ResultEditor.ResultEditModel> model = new List<ResultEditor.ResultEditModel>();
    Timer saveTimer;
    ResultEditor editor_;
    ResultEditor Editor
    {
        get => editor_;
        set
        {
            editor_ = value;
            rubricResultEditors.Add(value); // trick to save reference for each component in the loop.
                                // see https://docs.microsoft.com/en-in/aspnet/core/blazor/components/?view=aspnetcore-5.0#capture-references-to-components
                                // and https://github.com/dotnet/aspnetcore/issues/13358
        }
    }
    readonly List<ResultEditor> rubricResultEditors = new List<ResultEditor>();

    const int SaveInterval = 2000; // save 2 seconds after last SetOutcome

    protected override async Task OnInitializedAsync()
    {
        var checklist = await Repository.ReadChecklistAsync(FarmInspectionId);
        if (checklist != null)
        {
            foreach (var rubricKvp in checklist.Rubrics)
            {
                model.Add(ResultEditor.ResultEditModel.FromDomain(rubricKvp.Value));
            }
        }
        FarmId = int.Parse(Navigation.QueryString("FarmId"));
        saveTimer = new Timer(SaveInterval) {AutoReset = false};
        saveTimer.Elapsed += async (sender, e) =>
        {
            Console.WriteLine($"Saving checklist... ({DateTime.Now.ToDetailedTime()})");
            await Repository.SaveChecklistAsync(checklist);
            Console.WriteLine($"Saved. ({DateTime.Now.ToDetailedTime()})");
        };
    }

    void OutcomeChanged(InspectionOutcome outcome)
    {
        saveTimer.Stop();
        saveTimer.Start();
    }

    public void Dispose()
    {
        saveTimer?.Dispose();
    }

    async Task ExpandAll()
    {
        foreach (var component in rubricResultEditors)
        {
            await component.ExpandAll();
        }
    }

    async Task CollapseAll()
    {
        foreach (var component in rubricResultEditors)
        {
            await component.CollapseAll();
        }
    }

}
