@page "/Checklist/{FarmInspectionId:int}"
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using InspectionOutcome = AcordaControlOffline.Shared.Domain.Inspection.InspectionOutcome
@using System.Timers
@inject NavigationManager Navigation
@inject IRepository Repository
@implements IDisposable

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/" + FarmId)'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Signatures/" + FarmInspectionId + "?FarmId=" + FarmId)'>
                <i class="fas fa-arrow-right"></i>
                Signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Manquements antérieurs</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        @if (checklist != null)
        {
            <div class="mb-2">
                <a href="#">Déplier tous</a> |
                <a href="#">Replier tous</a> |
                <a href="#">Afficher NA/NC auto</a> |
                <a href="#">Cacher NA/NC auto</a>
            </div>
            <div id="checklist">
                <div class="list-group">
                    @foreach (var kvp in checklist.Rubrics)
                    {
                        var item = kvp.Value;
                        <div id="@item.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            <ResultEditor Item="@item" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    public int FarmId;
    Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist.Checklist checklist;
    Timer saveTimer;
    const int SaveInterval = 2000; // save 2 seconds after last SetOutcome

    protected override async Task OnInitializedAsync()
    {
        checklist = await Repository.ReadChecklistAsync(FarmInspectionId);
        FarmId = int.Parse(Navigation.QueryString("FarmId"));
        saveTimer = new Timer(SaveInterval) {AutoReset = false};
        saveTimer.Elapsed += async (sender, e) =>
        {
            Console.WriteLine("Saving checklist...");
            await Repository.SaveChecklistAsync(checklist);
            Console.WriteLine("Saved.");
        };
    }

    public string OutcomeCssClass(IResult rubric, InspectionOutcome outcome)
    {
        return rubric.Outcome == outcome && outcome == InspectionOutcome.Ok ? "btn-success" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.PartiallyOk ? "btn-warning" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotOk ? "btn-danger" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotInspected ? "btn-primary" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotApplicable ? "btn-primary" :
               "btn-default";
    }

    void OutcomeChanged(InspectionOutcome outcome)
    {
        saveTimer.Stop();
        saveTimer.Start();
    }

    public void Dispose()
    {
        saveTimer?.Dispose();
    }

}
