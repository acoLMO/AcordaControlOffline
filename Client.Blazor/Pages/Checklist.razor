@page "/Checklist/{FarmInspectionId:int}"
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using InspectionOutcome = AcordaControlOffline.Shared.Domain.Inspection.InspectionOutcome
@inject NavigationManager Navigation
@inject IRepository Repository

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/" + FarmId)'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Signatures/" + FarmInspectionId + "?FarmId=" + FarmId)'>
                <i class="fas fa-arrow-right"></i>
                Signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Manquements antérieurs</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        @if (checklist != null)
        {
            <div class="mb-2">
                <a href="#">Déplier tous</a> |
                <a href="#">Replier tous</a> |
                <a href="#">Afficher NA/NC auto</a> |
                <a href="#">Cacher NA/NC auto</a>
            </div>
            <div id="checklist">
                <div class="list-group">
                    @foreach (var kvp in checklist.Rubrics)
                    {
                        var item = kvp.Value;
                        <div id="@item.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            @*<i class="fas fa-chevron-right fa-3x float-left datatoggle rotate mr-2" data-toggle="collapse" data-target="#01_1_2018 > .sub-elements"></i>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumGroups</span>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumPoints</span>
                            <h4 class="list-group-item-heading">@item.ShortName</h4>
                            <p class="list-group-item-text mb-2">@item.ConjunctElementCode</p>
                            <button class="btn btn-circle btn-circle-sm mr-1 @OutcomeCssClass(item, InspectionOutcome.Ok)" @onclick="() => SetOutcome(item, InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
                            <button class="btn btn-circle btn-circle-sm mr-1 @OutcomeCssClass(item, InspectionOutcome.PartiallyOk)  " @onclick="() => SetOutcome(item, InspectionOutcome.PartiallyOk)">P</button>
                            <button class="btn btn-circle btn-circle-sm mr-1 @OutcomeCssClass(item, InspectionOutcome.NotOk)" @onclick="() => SetOutcome(item, InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
                            <button class="btn btn-circle btn-circle-sm mr-1 @OutcomeCssClass(item, InspectionOutcome.NotInspected) " @onclick="() => SetOutcome(item, InspectionOutcome.NotInspected)">NC</button>
                            <button class="btn btn-circle btn-circle-sm mr-1 @OutcomeCssClass(item, InspectionOutcome.NotApplicable) " @onclick="() => SetOutcome(item, InspectionOutcome.NotApplicable)">NA</button>
                            @if (item.Outcome != InspectionOutcome.Unset)
                            {
                                <button @onclick="() => ResetOutcome(item)" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
                            }*@
                            <ResultEditor Item="@item" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                            
                            @if (item.NumPoints > 0 || item.NumGroups > 0)
                            {
                                <div class="sub-elements mt-2 collapse">
                                    @if (item.NumGroups > 0)
                                    {
                                        <div class="list-group">
                                            @foreach (var g0 in item.Groups)
                                            {
                                                <div id="@g0.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                                                    <ResultEditor Item="@g0" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                                                </div>
                                            }
                                        </div>
                                    }
                                    @if (item.NumPoints > 0)
                                    {
                                        <div class="list-group">
                                            @foreach (var p0 in item.Points)
                                            {
                                                <div id="@p0.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                                                    <ResultEditor Item="@p0" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    public int FarmId;
    Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist.Checklist checklist;

    protected override async Task OnInitializedAsync()
    {
        checklist = await Repository.ReadChecklistAsync(FarmInspectionId);
        FarmId = int.Parse(Navigation.QueryString("FarmId"));
    }

    public string OutcomeCssClass(IResult rubric, InspectionOutcome outcome)
    {
        return rubric.Outcome == outcome && outcome == InspectionOutcome.Ok ? "btn-success" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.PartiallyOk ? "btn-warning" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotOk ? "btn-danger" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotInspected ? "btn-primary" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NotApplicable ? "btn-primary" :
               "btn-default";
    }

    //async void SetOutcome(Result result, InspectionOutcome outcome)
    //{
    //    result.Outcome = outcome;
    //    await Repository.SaveChecklistAsync(checklist);
    //}

    //async void ResetOutcome(Result result)
    //{
    //    result.Outcome = InspectionOutcome.Unset;
    //    await Repository.SaveChecklistAsync(checklist);
    //}

    async void OutcomeChanged(InspectionOutcome outcome)
    {
        await Repository.SaveChecklistAsync(checklist);
    }
}
