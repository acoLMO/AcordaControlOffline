@page "/Checklist/{FarmInspectionId:int}"
@using System.IO
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using CSharpFunctionalExtensions
@using Newtonsoft.Json
@inject NavigationManager Navigation
@inject HttpClient Http

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo("/AcordaControlOffline/MandateDetail/1")'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo("/AcordaControlOffline/Signatures/1")'>
                <i class="fas fa-arrow-right"></i>
                Signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Manquements antérieurs</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        @if (per != null)
        {
            <div class="mb-2">
                <a href="#">Déplier tous</a> |
                <a href="#">Replier tous</a> |
                <a href="#">Afficher NA/NC auto</a> |
                <a href="#">Cacher NA/NC auto</a>
            </div>
            <div id="checklist">
                <div class="list-group">
                    @foreach (var item in per)
                    {
                        <div id="@item.ConjuntElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            <i class="fas fa-chevron-right fa-3x float-left datatoggle rotate mr-2" data-toggle="collapse" data-target="#01_1_2018 > .sub-elements"></i>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumGroups</span>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumPoints</span>
                            <h4 class="list-group-item-heading">@item.Title</h4>
                            <p class="list-group-item-text mb-2">@item.ConjuntElementCode</p>
                            <button href="#" data-whenunset="btn-default" data-whenset="btn-success" data-hasresult="False" data-action="quickset" data-quickaction="Ok" data-deleteurl="/RubricResult/Delete/0" class="btn btn-default btn-circle btn-circle-sm"><i class="far fa-thumbs-up"></i></button>
                            <button href="#" data-whenunset="btn-default" data-whenset="btn-warning" data-hasresult="False" data-action="quickset" data-quickaction="POk" data-deleteurl="/RubricResult/Delete/0" class="btn btn-default btn-circle btn-circle-sm">P</button>
                            <button href="#" data-whenunset="btn-default" data-whenset="btn-danger" data-hasresult="False" data-action="quickset" data-quickaction="NOk" data-deleteurl="/RubricResult/Delete/0" class="btn btn-default btn-circle btn-circle-sm"><i class="far fa-thumbs-down"></i></button>
                            <button href="#" data-whenunset="btn-default" data-whenset="btn-primary" data-hasresult="False" data-action="quickset" data-quickaction="Nc" data-deleteurl="/RubricResult/Delete/0" class="btn btn-default btn-circle btn-circle-sm">NC</button>
                            <button href="#" data-whenunset="btn-default" data-whenset="btn-primary" data-hasresult="False" data-action="quickset" data-quickaction="Na" data-deleteurl="/RubricResult/Delete/0" class="btn btn-default btn-circle btn-circle-sm">NA</button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }

    Data[] per;

    class Data
    {
        public Data(string conjuntElementCode, string title, int numGroups, int numPoints)
        {
            ConjuntElementCode = conjuntElementCode;
            Title = title;
            NumGroups = numGroups;
            NumPoints = numPoints;
        }

        public string ConjuntElementCode { get; }
        public string Title { get; }
        public int NumGroups { get; }
        public int NumPoints { get; }
    }

    protected override async Task OnInitializedAsync()
    {
        var readResult = await QuickAndDirtyReadJsonDataAsync<Data[]>("sample-data/checklist.json");
        if (readResult.IsSuccess)
        {
            per = readResult.Value;
        }
        else
        {
            Console.WriteLine("Failed to fetch sample checklist data from json file. Reason: " + readResult.Error);
            return;
        }
    }

    private async Task<Result<T>> QuickAndDirtyReadJsonDataAsync<T>(string uri)
    {
        using var httpResponse = await Http.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);
        httpResponse.EnsureSuccessStatusCode();

        if (httpResponse.Content == null || httpResponse.Content.Headers.ContentType.MediaType != "application/json")
            return Result.Failure<T>("HTTP Response has no content or content is not json.");

        var contentStream = await httpResponse.Content.ReadAsStreamAsync();
        using var streamReader = new StreamReader(contentStream);
        using var jsonReader = new JsonTextReader(streamReader);
        var serializer = new JsonSerializer();
        try
        {
            var data = serializer.Deserialize<T>(jsonReader);
            return Result.Success(data);
        }
        catch (JsonReaderException)
        {
            return Result.Failure<T>($"Error while deserializing json: {nameof(JsonReaderException)} exception encountered.");
        }
    }
}
