@page "/Checklist/{FarmInspectionId:int}"
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateList
@inject NavigationManager Navigation
@inject IRepository Repository

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Récapitulatif</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/1")'>
                <i class="fas fa-arrow-left"></i>
                Retour Mandat
            </button>
            <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Signatures/1")'>
                <i class="fas fa-arrow-right"></i>
                Signatures
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Manquements antérieurs</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Content here</p>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Exigences</h3>
    </div>
    <div class="card-body">
        @if (checklist != null)
        {
            <div class="mb-2">
                <a href="#">Déplier tous</a> |
                <a href="#">Replier tous</a> |
                <a href="#">Afficher NA/NC auto</a> |
                <a href="#">Cacher NA/NC auto</a>
            </div>
            <div id="checklist">
                <div class="list-group">
                    @foreach (var item in checklist.Rubrics)
                    {
                        <div id="@item.ConjuntElementCode.CurateAsElementId()" class="list-group-item" href="#">
                            <i class="fas fa-chevron-right fa-3x float-left datatoggle rotate mr-2" data-toggle="collapse" data-target="#01_1_2018 > .sub-elements"></i>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumGroups</span>
                            <span class="badge bg-indigo disabled float-right mr-1">@item.NumPoints</span>
                            <h4 class="list-group-item-heading">@item.Title</h4>
                            <p class="list-group-item-text mb-2">@item.ConjuntElementCode</p>
                            <button class="btn btn-circle btn-circle-sm @OutcomeCssClass(item, InspectionOutcome.Oui)" @onclick="() => SetOutcome(item, InspectionOutcome.Oui)"><i class="far fa-thumbs-up"></i></button>
                            <button class="btn btn-circle btn-circle-sm @OutcomeCssClass(item, InspectionOutcome.P)  " @onclick="() => SetOutcome(item, InspectionOutcome.P)"  >P</button>
                            <button class="btn btn-circle btn-circle-sm @OutcomeCssClass(item, InspectionOutcome.Non)" @onclick="() => SetOutcome(item, InspectionOutcome.Non)"><i class="far fa-thumbs-down"></i></button>
                            <button class="btn btn-circle btn-circle-sm @OutcomeCssClass(item, InspectionOutcome.NC) " @onclick="() => SetOutcome(item, InspectionOutcome.NC)" >NC</button>
                            <button class="btn btn-circle btn-circle-sm @OutcomeCssClass(item, InspectionOutcome.NA) " @onclick="() => SetOutcome(item, InspectionOutcome.NA)" >NA</button>
                            @if (item.Outcome != InspectionOutcome.Unset)
                            {
                                <button @onclick="() => ResetOutcome(item)" class="btn btn-circle btn-circle-sm btn-default"><i class="far fa-trash-alt"></i></button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }

    ChecklistSample checklist;

    protected override async Task OnInitializedAsync()
    {
        checklist = await Repository.ReadChecklistSampleAsync();
    }

    public string OutcomeCssClass(ChecklistSample.ListItem rubric, InspectionOutcome outcome)
    {
        return rubric.Outcome == outcome && outcome == InspectionOutcome.Oui ? "btn-success" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.P ? "btn-warning" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.Non ? "btn-danger" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NC ? "btn-primary" :
               rubric.Outcome == outcome && outcome == InspectionOutcome.NA ? "btn-primary" :
               "btn-default";
    }

    async void SetOutcome(ChecklistSample.ListItem rubric, InspectionOutcome outcome)
    {
        rubric.Outcome = outcome;
        await Repository.SaveChecklistSampleAsync(checklist);
    }

    async void ResetOutcome(ChecklistSample.ListItem rubric)
    {
        rubric.Outcome = InspectionOutcome.Unset;
        await Repository.SaveChecklistSampleAsync(checklist);
    }
}
