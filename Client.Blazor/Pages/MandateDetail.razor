@page "/MandateDetail/{FarmId:int}"
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateDetail

@if (mandate == null)
{
    <p>Loading...</p> // No need for skeleton-loading since data is read from local store.
}
else
{
    <div class="card">
        <div class="card-header">

            <h3 class="card-title">@mandate.Farm.Ktidb @mandate.Farm.FarmName</h3>

            <div class="card-tools">
                <button type="button" class="btn btn-default" @onclick="() => NavigateToFarmDetail(mandate.Farm.Id)">
                    <span class="fa-stack stacked-icon-button">
                        <i class="far fa-circle fa-stack-2x"></i>
                        <i class="fas fa-info fa-stack-1x"></i>
                    </span> Consulter
                </button>
            </div>

            <p class="clearboth mb-0">
                <FarmBase Farm="@mandate.Farm" />
            </p>
        </div>
        <div class="card-body">

            <p class="mb-1">
                <label class="badge-label">SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandate.Farm.AgriculturalArea</span>
                <label class="badge-label">non SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandate.Farm.NonAgriculturalArea</span>
                <label class="badge-label">UGB:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandate.Farm.BovineStandardUnits</span>
                <label class="badge-label">dont BDTA:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandate.Farm.BovineStandardUnitsFromBdta</span>
            </p>
            <BadgeBar Badges="@mandate.Farm.Badges" />
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Check-listes</h3>
            <div class="card-tools">
                <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo("/")'>
                    <i class="fas fa-arrow-left"></i> Retour à la liste des mandats
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="list-group">
                @foreach (var checklist in mandate.CheckLists)
                {
                    <div class="list-group-item">
                        <button type="button" class="btn btn-success btn-sm float-right" @onclick="() => NavigateToChecklist(checklist.FarmInspectionId)">
                            <i class="fas fa-arrow-right"></i> Check-Liste
                        </button>
                        <h4 class="list-group-item-heading">@checklist.Domain</h4>
                        <p class="list-group-item-text"><span class="badge bg-purple"><i class="far fa-folder-open"></i> @checklist.Campaign</span></p>
                        <button class="btn btn-app h-auto">
                            <i class="far fa-calendar-alt"></i>
                            <span class="d-block">(non agendé)</span>
                            <span class="d-block">Rendez-vous le 25.10.2020</span>
                            <span class="d.d-block">Contacté le 19.10.2020</span>
                            <span class="text-red d-block"><i class="fas fa-exclamation"></i> Inopiné</span>
                        </button>
                        <div class="btn btn-app h-auto"><i class="fas fa-question"></i>Routine</div>
                        <div class="btn btn-app h-auto"><i class="far fa-flag"></i>Planifié</div>
                        <button class="btn btn-app h-auto">
                            <i class="far fa-comment-dots text-warning"></i>
                            <span style="white-space: pre-wrap">Remarque pour la gérance</span>
                        </button>
                        <button class="btn btn-app h-auto"><i class="far fa-copy text-danger"></i>Suivi documents</button>
                        <ProgressBar Progress="@checklist" />
                        @if (checklist.HasComplianceRequirements)
                        {
                            <p class="mb-1">
                                <strong>Délai de mise en conformité jusqu'au: @checklist.ComplianceDeadline</strong>
                                <span class="text-yellow"> @Late</span>
                                <span class="text-green"><i class="far fa-thumbs-up"></i> @Compliant</span>
                                <span class="text-red"><i class="far fa-thumbs-down"></i> @LateOrNotCompliant</span>
                            </p>
                        }
                        @if (checklist.CanGeneratePdfReport)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-file-download"></i> Enregistrer le rapport de contrôle</button>
                        }
                        @if (checklist.CanDisplayPdfReport)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="far fa-file-pdf"></i> Consulter / Envoyer le rapport de contrôle</button>
                        }
                        @if (checklist.CanClose)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock"></i> Clôturer</button>
                        }
                        @if (checklist.IsClosed)
                        {
                            <p class="mb-1"><strong>Clôturé le @checklist.CloseDate par @checklist.ClosedBy.</strong></p>
                        }
                        @if (checklist.CanReopen)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock-open"></i> Rouvrir</button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    public const string LateOrNotCompliant = "Hors délai ou non conforme";
    public const string Late = "!! expiré !!";
    public const string Compliant = "Délai respecté";
    
    [Parameter] public int FarmId { get; set; }

    private Mandate mandate;
    protected override async Task OnInitializedAsync()
    {
        string key = LocalStorageKeys.MandateDetailKey(FarmId);
        mandate = await LocalStorage.GetItemAsync<Mandate>(key);
    }

    void NavigateToChecklist(int farmInspectionId)
    {
        if (farmInspectionId > 0)
        {
            Navigation.NavigateTo($"/Checklist/{farmInspectionId}");
        }
    }

    void NavigateToFarmDetail(int farmId)
    {
        if (farmId > 0)
        {
            Navigation.NavigateTo($"/FarmDetail/{farmId}");
        }
    }
}