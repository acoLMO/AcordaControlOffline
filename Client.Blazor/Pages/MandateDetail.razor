@page "/MandateDetail/{FarmId:int}"
@inject NavigationManager Navigation
@inject IRepository Repository
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Farm
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using Config = Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices.Config
@using Mandate = Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateDetail.Mandate

@if (mandateViewModel != null)
{
    <div class="card">
        <div class="card-header">

            <h3 class="card-title">@mandateViewModel.Farm.Ktidb @mandateViewModel.Farm.FarmName</h3>

            <div class="card-tools">
                <button type="button" class="btn btn-default" @onclick="() => NavigateToFarmDetail(mandateViewModel.Farm.Id)">
                    <span class="fa-stack stacked-icon-button">
                        <i class="far fa-circle fa-stack-2x"></i>
                        <i class="fas fa-info fa-stack-1x"></i>
                    </span> Consulter
                </button>
            </div>

            <p class="clearboth mb-0">
                <FarmBase Farm="@mandateViewModel.Farm" />
            </p>
        </div>
        <div class="card-body">

            <p class="mb-1">
                <label class="badge-label">SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandateViewModel.Farm.AgriculturalArea</span>
                <label class="badge-label">non SAU:</label> <span class="badge badge-round badge-info text-white p-1 mr-3">@mandateViewModel.Farm.NonAgriculturalArea</span>
                <label class="badge-label">UGB:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandateViewModel.Farm.BovineStandardUnits</span>
                <label class="badge-label">dont BDTA:</label> <span class="badge badge-round bg-animal text-white p-1 mr-3">@mandateViewModel.Farm.BovineStandardUnitsFromBdta</span>
            </p>
            <BadgeBar Badges="@mandateViewModel.Farm.Badges" />
        </div>
    </div>

    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Check-listes</h3>
            <div class="card-tools">
                <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/")'>
                    <i class="fas fa-arrow-left"></i> Retour à la liste des mandats
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="list-group">
                @foreach (var (inspection, index) in mandateViewModel.Inspections.Select((item, index) => (item, index)))
                {
                    <div class="list-group-item">
                        <button type="button" class="btn btn-success btn-sm float-right" @onclick="() => NavigateToChecklist(inspection.FarmInspectionId)">
                            <i class="fas fa-arrow-right"></i> Check-Liste
                        </button>
                        <h4 class="list-group-item-heading">@inspection.Domain</h4>
                        <p class="list-group-item-text"><span class="badge bg-purple"><i class="far fa-folder-open"></i> @inspection.Campaign</span></p>
                        <Blazorise.Button class="btn-app h-auto" Clicked="() => ShowAppointmentModal(index)">
                            <i class="far fa-calendar-alt"></i>
                            <span class="d-block">@inspection.VisitDate</span>
                            @if (!string.IsNullOrWhiteSpace(inspection.AppointmentDate))
                            {
                                <span class="d-block">@inspection.AppointmentDate</span>
                            }
                            @if (inspection.IsUnexpected)
                            {
                                <span class="text-red d-block"><i class="fas fa-exclamation"></i> @InspectionMode.Unscheduled.Text</span>
                            }
                        </Blazorise.Button>
                        <div class="btn btn-app h-auto"><i class="fas fa-question"></i>Routine</div>
                        <div class="btn btn-app h-auto"><i class="far fa-flag"></i>Planifié</div>
                        <button class="btn btn-app h-auto">
                            <i class="far fa-comment-dots text-warning"></i>
                            <span style="white-space: pre-wrap">Pour la gérance</span>
                        </button>
                        <button class="btn btn-app h-auto"><i class="far fa-copy text-danger"></i>Suivi documents</button>
                        <ProgressBar Progress="@inspection" />
                        @if (inspection.HasComplianceRequirements)
                        {
                            <p class="mb-1">
                                <strong>Délai de mise en conformité jusqu'au: @inspection.ComplianceDeadline</strong>
                                <span class="text-yellow"> @Late</span>
                                <span class="text-green"><i class="far fa-thumbs-up"></i> @Compliant</span>
                                <span class="text-red"><i class="far fa-thumbs-down"></i> @LateOrNotCompliant</span>
                            </p>
                        }
                        @if (inspection.CanGeneratePdfReport)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-file-download"></i> Enregistrer le rapport de contrôle</button>
                        }
                        @if (inspection.CanDisplayPdfReport)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="far fa-file-pdf"></i> Consulter / Envoyer le rapport de contrôle</button>
                        }
                        @if (inspection.CanClose)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock"></i> Clôturer</button>
                        }
                        @if (inspection.IsClosed)
                        {
                            <p class="mb-1"><strong>Clôturé le @inspection.CloseDate par @inspection.ClosedBy.</strong></p>
                        }
                        @if (inspection.CanReopen)
                        {
                            <button class="btn btn-primary mr-1 mb-1"><i class="fas fa-lock-open"></i> Rouvrir</button>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@if (appointmentModel != null)
{
    <Blazorise.Modal @ref="appointmentModal">
        <Blazorise.ModalBackdrop />
        <EditForm Model="appointmentModel" OnSubmit="@SaveAppointementDetails">
            <Blazorise.ModalContent IsCentered="true">
                <Blazorise.ModalHeader>
                    <Blazorise.ModalTitle>Prendre rendez-vous avec l'exploitant</Blazorise.ModalTitle>
                    <Blazorise.CloseButton Clicked="@HideAppointmentModal" />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Téléphone</Blazorise.FieldLabel>
                        <Blazorise.TextEdit ReadOnly @bind-Text="@appointmentModel.Phone" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Courriel</Blazorise.FieldLabel>
                        <Blazorise.TextEdit ReadOnly @bind-Text="@appointmentModel.Email" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Date de premier contact</Blazorise.FieldLabel>
                        <Blazorise.DateEdit TValue="DateTime?" @bind-Date="@appointmentModel.FirstContactDate" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Date de rendez-vous</Blazorise.FieldLabel>
                        <Blazorise.DateEdit TValue="DateTime?" @bind-Date="@appointmentModel.Date" />
                    </Blazorise.Field>
                    @*<Blazorise.Field>
                        <Blazorise.FieldLabel>Annoncé / Inopiné</Blazorise.FieldLabel>
                        <Blazorise.Select @bind-SelectedValue="@appointmentModel.Mode">
                            @foreach (var mode in appointmentModel.ComboInspectionModes)
                            {
                                <Blazorise.SelectItem Value="@mode.Value">@mode.Text</Blazorise.SelectItem>
                            }
                        </Blazorise.Select>
                    </Blazorise.Field>*@
                </Blazorise.ModalBody>
                <Blazorise.ModalFooter>
                    <button type="submit" class="btn btn-primary float-left mr-2"><i class="far fa-save"></i> Enregistrer</button>
                    <button class="btn btn-default float-left mr-2" @onclick="@HideAppointmentModal">Annuler</button>
                </Blazorise.ModalFooter>
            </Blazorise.ModalContent>
        </EditForm>
    </Blazorise.Modal>
}

@code {
    public const string LateOrNotCompliant = "Hors délai ou non conforme";
    public const string Late = "!! expiré !!";
    public const string Compliant = "Délai respecté";

    [Parameter] public int FarmId { get; set; }

    private Mandate mandateViewModel;
    private Farm farm;
    private AcordaControlOffline.Shared.Domain.Mandate.Mandate mandate;
    private Blazorise.Modal appointmentModal;
    private AppointmentModel appointmentModel;

    protected override async Task OnInitializedAsync()
    {
        farm = await Repository.ReadFarmAsync(FarmId);
        mandate = await Repository.ReadMandateAsync(FarmId);
        mandateViewModel = Mandate.FromDomain(farm, mandate);
        appointmentModel = AppointmentModel.FromDomain(farm, mandate.Inspections.First());
    }

    private void NavigateToChecklist(int farmInspectionId)
    {
        if (farmInspectionId > 0)
        {
            Navigation.NavigateTo($"{Config.BaseUrl}/Checklist/{farmInspectionId}");
        }
    }

    private void NavigateToFarmDetail(int farmId)
    {
        if (farmId > 0)
        {
            Navigation.NavigateTo($"{Config.BaseUrl}/FarmDetail/{farmId}");
        }
    }

    private void ShowAppointmentModal(int index)
    {
        appointmentModel = AppointmentModel.FromDomain(farm, mandate.Inspections[index], index);
        appointmentModal.Show();
    }

    private void HideAppointmentModal()
    {
        appointmentModal.Hide();
    }

    async void SaveAppointementDetails(EditContext editContext)
    {
        var model = (AppointmentModel) editContext.Model;
        mandate.Inspections[model.InspectionIndex].SetAppointment(new Appointment(model.Date, model.FirstContactDate));
        mandateViewModel = Mandate.FromDomain(farm, mandate);
        StateHasChanged();
        appointmentModal.Hide();
        await Repository.SaveMandateAsync(mandate, FarmId);
    }

    public class AppointmentModel
    {
        public int InspectionIndex { get; set; }
        public DateTime? Date { get; set; }
        public DateTime? FirstContactDate { get; set; }
        public int Mode { get; set; }
        public string Phone { get; set; }
        public string Email { get; set; }
        //public IEnumerable<InspectionMode> ComboInspectionModes { get; set; }

        public static AppointmentModel FromDomain(Farm farm, Inspection inspection, int index = 0)
        {
            return new AppointmentModel
            {
                InspectionIndex = index,
                Email = farm.Email,
                Date = inspection.Appointment.Date,
                FirstContactDate = inspection.Appointment.FirstContactDate,
                Mode = inspection.Appointment.Mode.Value,
                Phone = farm.PhoneNumber,
                //ComboInspectionModes = new []{ InspectionMode.Scheduled, InspectionMode.Unscheduled }
            };
        }
    }
}