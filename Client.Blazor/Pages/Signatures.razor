@page "/Signatures/{FarmInspectionId:int}"
@attribute [Authorize]
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.Signature
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager Navigation
@inject IRepository Repository

@if (isInitialized)
{
    <div class="card">
        <div class="card-header">
            <div class="card-title">Rapport de contrôle</div>
            <div class="card-tools">
                <button type="button" class="btn btn-sm btn-default" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/Checklist2/" + FarmInspectionId + "?FarmId=" + FarmId)'>
                    <i class="fas fa-arrow-left"></i>
                    Retour Check-Liste
                </button>
                <button type="button" class="btn btn-sm btn-success" @onclick='() => Navigation.NavigateTo(Config.BaseUrl + "/MandateDetail/" + FarmId)'>
                    <i class="fas fa-arrow-right"></i>
                    Mandat
                </button>
            </div>
        </div>
        <div class="card-body">
            <div class="form-group">
                <button class="btn btn-primary"><i class="far fa-file-pdf"></i> Afficher le rapport de contrôle provisoire</button>
            </div>
            <div class="form-group">
                <div class="callout callout-info">
                    <p>L'exploitant ou son représentant atteste avoir pris connaissance du présent rapport de contrôle. En cas de contestation, une réclamation écrite avec les points contestés peut être adressée dans les trois jours ouvrables suivant le contrôle à l'organisme d'inspection ayant effectué le contrôle.</p>
                </div>
            </div>
        </div>
    </div>
}

@if (isInitialized)
{
    <EditForm Model="@actionsOrDocumentEditModel_" OnSubmit="@SaveActionsOrDocuments">
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Remarques / Documents / Mesures</h3>
            </div>
            <div class="card-body">
                <div class="form-group"></div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel_.CommentForFarmer)">Remarque générale</label>
                    <Blazorise.MemoEdit Text="@actionsOrDocumentEditModel_.CommentForFarmer" TextChanged="@OnCommentForFarmerChanged" id="@nameof(actionsOrDocumentEditModel_.CommentForFarmer)" />
                </div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel_.ActionsOrDocuments)">Documents à livrer / mesures à prendre</label>
                    <Blazorise.MemoEdit Text="@actionsOrDocumentEditModel_.ActionsOrDocuments" TextChanged="@OnActionsOrDocumentsChanged" id="@nameof(actionsOrDocumentEditModel_.ActionsOrDocuments)" />
                </div>
                <div class="form-group">
                    <label for="@nameof(actionsOrDocumentEditModel_.DueDate)">Délai</label>
                    <Blazorise.DateEdit TValue="DateTime?" Date="@actionsOrDocumentEditModel_.DueDate" DateChanged="@OnDueDateChanged" id="@nameof(actionsOrDocumentEditModel_.DueDate)" />
                </div>
            </div>
            <div class="card-footer">
                @if (needsSaving)
                {
                    <button type="submit" class="btn btn-primary"><i class="far fa-save"></i> Enregistrer</button>
                }
            </div>
        </div>
    </EditForm>
}

@if (isInitialized)
{
    string inspectorSignatureUrl = $"/Sign/{FarmInspectionId}?FarmId={FarmId}&type=inspector&ReturnUrl={Navigation.Uri}";
    string farmerSignatureUrl = $"/Sign/{FarmInspectionId}?FarmId={FarmId}&type=farmer&ReturnUrl={Navigation.Uri}";
    string inspector2SignatureUrl = $"/Sign/{FarmInspectionId}?FarmId={FarmId}&type=inspector2&ReturnUrl={Navigation.Uri}";
    <div class="card">
        <div class="card-header">
            <h3 class="card-title">Signatures</h3>
        </div>
        <ul class="list-group list-group-flush">
            <li class="list-group-item">
                @if (signatures.InspectorHasSigned)
                {
                    <div class="form-group">
                        <label>Le contrôleur @signatures.InspectorDisplay</label>
                        <button @onclick="@(() => Navigation.NavigateTo(inspectorSignatureUrl))" class="btn btn-sm btn-default mr-1"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.InspectorSignature.DataUrl" style="width: 100%"/>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label>Le contrôleur n'a pas signé</label>
                        <button @onclick="@(() => Navigation.NavigateTo(inspectorSignatureUrl))" class="btn btn-primary form-control"><i class="far fa-hand-point-right"></i> Signer</button>
                    </div>
                }
            </li>
            <li class="list-group-item">
                @if (signatures.FarmerHasSigned)
                {
                    <div class="form-group">
                        <label>L'exploitant @signatures.FarmerDisplay</label>
                        <button @onclick="@(() => Navigation.NavigateTo(farmerSignatureUrl))" class="btn btn-sm btn-default mr-1"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.FarmerSignature.DataUrl" style="width: 100%" />
                    </div>
                }
                else
                {
                    <div class="form-group">
                        <label>L'exploitant n'a pas signé</label>
                        <button @onclick="@(() => Navigation.NavigateTo(farmerSignatureUrl))" class="btn btn-primary form-control"><i class="far fa-hand-point-right"></i> Signer</button>
                    </div>
                }
            </li>
            <li class="list-group-item">
                @if (signatures.AdditionalInspectionHasSigned)
                {
                    <div class="form-group">
                        <label>Contrôleur additionnel @signatures.AdditionalInspectorDisplay</label>
                        <button @onclick="@(() => Navigation.NavigateTo(inspector2SignatureUrl))" class="btn btn-sm btn-default mr-1"><i class="fas fa-undo"></i> Corriger la signature</button>
                        <img src="@signatures.AdditionalSignature.DataUrl" style="width: 100%"/>
                    </div>
                }
                else
                {
                    <p>
                        <a href="@inspector2SignatureUrl">Cliquer ici pour un contrôleur additionnel</a>
                    </p>
                }
            </li>
        </ul>
    </div>
}

@code {
    [Parameter]
    public int FarmInspectionId { get; set; }
    private int FarmId;

    ActionsOrDocumentEditModel actionsOrDocumentEditModel_;
    bool needsSaving = false;

    SignaturesDisplay signatures;
    bool isInitialized;

    public class SignaturesDisplay
    {
        public SignatureModel FarmerSignature { get; set; }
        public SignatureModel InspectorSignature { get; set; }
        public SignatureModel AdditionalSignature { get; set; }
        public string FarmerDisplay { get; set; }
        public string InspectorDisplay { get; set; }
        public string AdditionalInspectorDisplay { get; set; }
        public bool FarmerHasSigned { get; set; }
        public bool InspectorHasSigned { get; set; }
        public bool AdditionalInspectionHasSigned { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        actionsOrDocumentEditModel_ = await Repository.ReadActionsOrDocumentsAsync() ?? new ActionsOrDocumentEditModel();
        FarmId = int.Parse(Navigation.QueryString("FarmId"));
        var farm = await Repository.ReadFarmAsync(FarmId);
        var mandate = await Repository.ReadMandateAsync(FarmId);
        var inspection = mandate.Inspections.FirstOrDefault(x => x.FarmInspectionId == FarmInspectionId);
        if (inspection == null)
            Console.WriteLine($"Error loading inspection with FarmInspectionId={FarmInspectionId}");
        else
        {
            signatures = new SignaturesDisplay();
            signatures.FarmerSignature = SignatureModel.FromDomain(inspection.FarmerSignature);
            signatures.InspectorSignature = SignatureModel.FromDomain(inspection.InspectorSignature);
            signatures.AdditionalSignature = SignatureModel.FromDomain(inspection.Inspector2Signature);
            signatures.FarmerDisplay = inspection.FarmerSignature.HasProxy
                                           ? $"(représenté par {inspection.FarmerSignature.Proxy})"
                                           : $"({inspection.FarmerSignature.Signatory})";
            signatures.InspectorDisplay = $"({inspection.InspectorSignature.Signatory})";
            signatures.AdditionalInspectorDisplay = $"({inspection.Inspector2Signature.Signatory})";
            signatures.FarmerHasSigned = !string.IsNullOrEmpty(signatures.FarmerSignature.Data);
            signatures.InspectorHasSigned = !string.IsNullOrEmpty(signatures.InspectorSignature.Data);
            signatures.AdditionalInspectionHasSigned = !string.IsNullOrEmpty(signatures.AdditionalSignature.Data);
        }
        isInitialized = true;
    }

    async void SaveActionsOrDocuments(EditContext editContext)
    {
        needsSaving = false;
        await Repository.SaveActionsOrDocumentsAsync((ActionsOrDocumentEditModel)editContext.Model);
    }

    void OnDueDateChanged(DateTime? date)
    {
        actionsOrDocumentEditModel_.DueDate = date;
        needsSaving = true;
    }

    void OnCommentForFarmerChanged(string value)
    {
        actionsOrDocumentEditModel_.CommentForFarmer = value;
        needsSaving = true;
    }

    void OnActionsOrDocumentsChanged(string value)
    {
        actionsOrDocumentEditModel_.ActionsOrDocuments = value;
        needsSaving = true;
    }
}
