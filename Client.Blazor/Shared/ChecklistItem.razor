@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.Pages
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection

<div id="@Node.Id" class="list-group-item">
    @if (Node.NumPoints > 0 || Node.NumGroups > 0)
    {
        <a @onclick="@(() => OnNodeViewChanged.InvokeAsync(Node.ConjunctElementCode))"><i class="fas fa-chevron-right fa-3x float-left rotate mr-2"></i></a>
    }
    <span class="badge bg-indigo disabled float-right mr-1">@Node.NumGroups</span>
    <span class="badge bg-indigo disabled float-right mr-1">@Node.NumPoints</span>
    <h4 class="list-group-item-heading">@Node.ShortName</h4>
    <p class="list-group-item-text mb-2">@Node.ConjunctElementCode</p>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.Ok)" @onclick="() => SetOutcome(InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.PartiallyOk)" @onclick="() => SetOutcome(InspectionOutcome.PartiallyOk)">P</button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotOk)" @onclick="() => SetOutcome(InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotInspected)" @onclick="() => SetOutcome(InspectionOutcome.NotInspected)">NC</button>
    <button class="btn btn-circle btn-circle-sm mr-1 @Node.Outcome.OutcomeCssClass(InspectionOutcome.NotApplicable)" @onclick="() => SetOutcome(InspectionOutcome.NotApplicable)">NA</button>
    @if (Node.Outcome != InspectionOutcome.Unset)
    {
        <button class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default">...</button>
        <button @onclick="() => confirmDelete.Show()" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
    }
</div>

<Blazorise.Modal @ref="@confirmDelete">
    <Blazorise.ModalBackdrop />
    <Blazorise.ModalContent>
        <Blazorise.ModalHeader>
            <Blazorise.ModalTitle>Confirmation</Blazorise.ModalTitle>
            <Blazorise.CloseButton Clicked="() => confirmDelete.Hide()" />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <Blazorise.FieldLabel>Êtes-vous sûr de vouloir supprimer les information saisies (résultat, remarques, pièces jointes, ...) ?</Blazorise.FieldLabel>
            </Blazorise.Field>
        </Blazorise.ModalBody>
        <Blazorise.ModalFooter>
            <button class="btn btn-info" @onclick="@Delete">Ok</button>
            <button class="btn btn-default" @onclick="() => confirmDelete.Hide()">Annuler</button>
        </Blazorise.ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

@code {
    [Parameter]
    public Checklist2.ResultModel Node { get; set; }
    [Parameter]
    public EventCallback<string> OnNodeViewChanged { get; set; }
    [Parameter]
    public EventCallback<Checklist2.ResultModel> OnNodeEdited { get; set; }
    [Parameter]
    public EventCallback<Checklist2.ResultModel> OnOutcomeChanged { get; set; }
    [Parameter]
    public EventCallback<Checklist2.ResultModel> OnDeleted { get; set; }
    Blazorise.Modal confirmDelete;

    async Task SetOutcome(InspectionOutcome outcome)
    {
        Node.Outcome = outcome;
        await OnOutcomeChanged.InvokeAsync(Node);
    }

    async Task Delete()
    {
        confirmDelete.Hide();
        await SetOutcome(InspectionOutcome.Unset);
        await OnDeleted.InvokeAsync(Node);
    }
}
