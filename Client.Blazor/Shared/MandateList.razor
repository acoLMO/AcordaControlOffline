@inject NavigationManager Navigation
@inject IRepository Repository
@inject IApiClient Api
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.Api
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.LocalStore
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel
@using Agridea.Acorda.AcordaControlOffline.Shared.ApplicationServices.ViewModel.MandateList

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Filtre</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-sm btn-default" data-card-widget="collapse">
                <i class="fas fa-minus"></i>
            </button>
        </div>
    </div>
    <div class="card-body">
        <p>Filter form here</p>
    </div>
    <div class="card-footer">
        <button class="btn btn-primary"><i class="fas fa-save"></i> Enregistrer</button>
    </div>
</div>

<div class="card">
    <div class="card-header">
        <h3 class="card-title">@numMandates exploitation@(plural) à contrôler</h3>
    </div>
    <div class="card-body p-0">
        <div class="list-group">
            @if (loading)
            {
                <div class="container-fluid m-0 p-0">
                    @for (int i = 0; i < 5; i++)
                    {
                        <div class="ph-item">
                            <div class="ph-col-8">
                                <div class="ph-picture"></div>
                            </div>
                            <div class="ph-col-2">
                            </div>
                            <div>
                                <div class="ph-row">
                                    <div class="ph-col-2 big empty"></div>
                                    <div class="ph-col-4 big"></div>
                                    <div class="ph-col-2 big empty"></div>
                                    <div class="ph-col-4 big"></div>
                                </div>
                            </div>
                            <div class="ph-col-12">
                                <div class="ph-row">
                                    <div class="ph-col-10"></div>
                                    <div class="ph-col-2 empty"></div>
                                    <div class="ph-col-4"></div>
                                    <div class="ph-col-8 empty"></div>
                                    <div class="ph-col-6"></div>
                                    <div class="ph-col-6 empty"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                foreach (var mandate in mandates)
                {
                    <div class="list-group-item @mandate.Farm.FarmTypeCode.BackgroundCssClass()">
                        @if (mandate.SyncStatus == SyncStatus.Loaded)
                        {
                            <button class="btn btn-success btn-sm float-right ml-1" @onclick="() => NavigateToMandateDetail(mandate.Farm.Id)">
                                <i class="fas fa-arrow-right"></i><span class="sr-only">Naviguer vers le détail du mandat</span> Mandat
                            </button>
                        }
                        @if (mandate.SyncStatus == SyncStatus.Unavailable ||
                            mandate.SyncStatus == SyncStatus.Loading)
                        {
                            <button class="btn btn-primary btn-sm float-right ml-1" @onclick="() => DownloadMandate(mandate, mandate.Farm.Id)">
                                @if (mandate.SyncStatus != SyncStatus.Loading)
                                {
                                    <i class="fas fa-cloud-download-alt"></i><span class="sr-only">Rendre disponible hors-connexion</span> <span>Télécharger</span>
                                }

                                @if (mandate.SyncStatus == SyncStatus.Loading)
                                {
                                    <i class="fas fa-spinner fa-spin"></i> <span>Téléchargement en cours...</span>
                                }
                            </button>
                        }

                        <h4 class="list-group-item-heading mb-1">@mandate.Farm.Ktidb @mandate.Farm.FarmName</h4>
                        <p class="list-group-item-text mb-1">
                            <FarmBase Farm="@mandate.Farm" />
                        </p>

                        <BadgeBar Badges="@mandate.Badges" />

                        @foreach (var checklist in mandate.Checklists)
                        {
                            <ProgressBar Progress="@checklist" />
                        }
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {

    private Mandate[] mandates;
    bool loading => mandates == null;
    string numMandates => mandates == null ? "" : $"{mandates.Length} ";
    string plural => mandates == null ? "s" :
                     mandates.Length > 1 ? "s"
                     : "";
    protected override async Task OnInitializedAsync()
    {
        mandates = await Repository.ReadAllMandatesAsync();
        if (mandates == null)
        {
            var mandatesResult = await Api.FetchAllMandatesAsync("sample-data/mandates.json");
            if (mandatesResult.IsSuccess)
            {
                mandates = mandatesResult.Value;
                await Repository.SaveMandatesAsync(mandates);
            }
            else
            {
                Console.WriteLine("Failed to fetch mandates from api. Reason: " + mandatesResult.Error);
                return;
            }
        }
        
        foreach (var mandate in mandates)
        {
            bool exists = await Repository.HasMandateAsync(mandate.Farm.Id);
            mandate.SyncStatus = exists ? SyncStatus.Loaded : SyncStatus.Unavailable;
        }
    }

    void NavigateToMandateDetail(int id)
    {
        if (id > 0)
        {
            Navigation.NavigateTo($"/MandateDetail/{id}");
        }
    }

    async Task DownloadMandate(Mandate mandate, int farmId)
    {
        var syncStatus = mandate.SyncStatus;
        mandate.SyncStatus = SyncStatus.Loading;
        var result = await Api.FetchMandateDetailAsync("sample-data/farm.json");
        if (result.IsFailure)
        {
            Console.WriteLine($"Api call to {nameof(Api.FetchMandateDetailAsync)} failed.");
            mandate.SyncStatus = syncStatus;
        }

        var mandateDetail = result.Value;
        await Repository.SaveMandateAsync(mandateDetail, farmId);
        mandate.SyncStatus = SyncStatus.Loaded;
    }
}
