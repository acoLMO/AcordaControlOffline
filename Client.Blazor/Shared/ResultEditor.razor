@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Checklist
@using Agridea.Acorda.AcordaControlOffline.Shared.Domain.Inspection
@using Agridea.Acorda.AcordaControlOffline.Client.Blazor.UiServices

@if (Item.Children?.Any() ?? false)
{
    <i class="fas fa-chevron-right fa-3x float-left datatoggle rotate mr-2 @right" data-toggle="collapse" data-target="#@Item.ConjunctElementCode.CurateAsElementId() > .sub-elements" @onclick="@ToggleChevron"></i>
}
<span class="badge bg-indigo disabled float-right mr-1">@Item.NumGroups</span>
<span class="badge bg-indigo disabled float-right mr-1">@Item.NumPoints</span>
<h4 class="list-group-item-heading">@Item.ShortName</h4>
<p class="list-group-item-text mb-2">@Item.ConjunctElementCode</p>
<button class="btn btn-circle btn-circle-sm mr-1 @Item.OutcomeCssClass(InspectionOutcome.Ok)" @onclick="() => SetOutcome(Item, InspectionOutcome.Ok)"><i class="far fa-thumbs-up"></i></button>
<button class="btn btn-circle btn-circle-sm mr-1 @Item.OutcomeCssClass(InspectionOutcome.PartiallyOk)  " @onclick="() => SetOutcome(Item, InspectionOutcome.PartiallyOk)">P</button>
<button class="btn btn-circle btn-circle-sm mr-1 @Item.OutcomeCssClass(InspectionOutcome.NotOk)" @onclick="() => SetOutcome(Item, InspectionOutcome.NotOk)"><i class="far fa-thumbs-down"></i></button>
<button class="btn btn-circle btn-circle-sm mr-1 @Item.OutcomeCssClass(InspectionOutcome.NotInspected) " @onclick="() => SetOutcome(Item, InspectionOutcome.NotInspected)">NC</button>
<button class="btn btn-circle btn-circle-sm mr-1 @Item.OutcomeCssClass(InspectionOutcome.NotApplicable) " @onclick="() => SetOutcome(Item, InspectionOutcome.NotApplicable)">NA</button>
@if (Item.Outcome != InspectionOutcome.Unset)
{
    <button @onclick="() => SetOutcome(Item, InspectionOutcome.Unset)" class="btn btn-circle btn-circle-sm mr-1 ml-1 btn-default"><i class="far fa-trash-alt"></i></button>
}

@if (Item.NumPoints > 0 || Item.NumGroups > 0)
{
    <div class="sub-elements mt-2 collapse">
        @if (Item.NumGroups > 0)
        {
            <div class="list-group">
                @foreach (var group in Item.Groups)
                {
                    <div id="@group.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                        <ResultEditor Item="@group" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                    </div>
                }
            </div>
        }
        @if (Item.NumPoints > 0)
        {
            <div class="list-group">
                @foreach (var point in Item.Points)
                {
                    <div id="@point.ConjunctElementCode.CurateAsElementId()" class="list-group-item" href="#">
                        <ResultEditor Item="@point" OnOutcomeChanged="@OutcomeChanged"></ResultEditor>
                    </div>
                }
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public ITreeNode<Result> Item { get; set; }

    [Parameter]
    public EventCallback<InspectionOutcome> OnOutcomeChanged { get; set; }

    string right = "";

    void ToggleChevron()
    {
        right = right == "" ? "right" : "";
    }

    async void SetOutcome(ITreeNode<Result> result, InspectionOutcome outcome)
    {
        result.SetOutcome(outcome);
        await OnOutcomeChanged.InvokeAsync(outcome);
    }

    async void OutcomeChanged(InspectionOutcome outcome)
    {
        await OnOutcomeChanged.InvokeAsync(outcome);
    }

}
